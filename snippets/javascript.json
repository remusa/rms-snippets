{
  // Console
  "Print to console": {
    "prefix": "cl",
    "body": [
      "console.log(`$1`)"
    ],
    "description": "Log output to console"
  },
  "Print variable to console": {
    "prefix": "cll",
    "body": [
      "console.log(`${$1}`)"
    ],
    "description": "Log output to console"
  },
  "Print table to console": {
    "prefix": "clta",
    "body": [
      "console.table(`${[$1]}`)"
    ],
    "description": "Log output to console as table"
  },
  "Print timer to console": {
    "prefix": "clti",
    "body": [
      "console.time('timer')",
      "",
      "${1:action}",
      "",
      "console.timeEnd('timer')"
    ],
    "description": "Log timer to console"
  },
  "Print JSON Stringify": {
    "prefix": "cls",
    "body": [
      "console.log(`${JSON.stringify($1)}`)"
    ],
    "description": "Print JSON Stringify"
  },
  "Print Object Entries": {
    "prefix": "clobe",
    "body": [
      "console.log(`${Object.entries($1)}`)"
    ],
    "description": "Console log an object and its keys-values"
  },
  // Strings and JSON
  "JSON Stringify": {
    "prefix": "jns",
    "body": [
      "JSON.stringify($1)"
    ],
    "description": "JSON Stringify"
  },
  "String Template": {
    "prefix": "ste",
    "body": [
      "`${$1}`"
    ],
    "description": "String Template"
  },
  // Arrays
  "Array Methods": {
    "prefix": "arm",
    "body": [
      "${1|forEach,map,filter,reduce,some|}((${2:item}) => {",
      "    $3",
      "})"
    ],
    "description": "Array Method"
  },
  "destructingArray": {
    "prefix": "ard",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  // Objects
  "destructingObject": {
    "prefix": "obd",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "Object Entries": {
    "prefix": "obe",
    "body": [
      "Object.entries($1)"
    ],
    "description": "Get object and its keys-values"
  },
  "Object Keys": {
    "prefix": "obk",
    "body": [
      "Object.keys($1)"
    ],
    "description": "Get object keys"
  },
  "Object Values": {
    "prefix": "obv",
    "body": [
      "Object.values($1)"
    ],
    "description": "Get object values"
  },
  // Functions
  "Named Function": {
    "prefix": "fn",
    "body": [
      "function ${1:functionName}($2) {",
      "  $3",
      "}"
    ],
    "description": "Named Function"
  },
  "Arrow Function": {
    "prefix": "fnar",
    "body": [
      "const ${1:functionName} = ($2) => {",
      "    $3",
      "}"
    ],
    "description": "Arrow Function"
  },
  "Anonymous Function": {
    "prefix": "fnan",
    "body": [
      "function() {",
      "  $2",
      "}"
    ],
    "description": "Anonymous Function"
  },
  // Control statements
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "  $2",
      "}"
    ],
    "description": "If Statement"
  },
  "If Else Statement": {
    "prefix": "ife",
    "body": [
      "if (${1:condition}) {",
      "  $2",
      "} else {",
      "    $3",
      "}"
    ],
    "description": "If else statement"
  },
  // Loops
  "forEach": {
    "prefix": "fea",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  // Intervals
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  // Imports
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0",
    "description": "Imports entire module in ES6 syntax without module name"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "require": {
    "prefix": "req",
    "body": "require('${1:package}')",
    "description": "Require a package"
  },
  "moduleExports": {
    "prefix": "emo",
    "body": "module.exports = {\n\t$0\n}\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },
  "exportNamedFunction": {
    "prefix": "enfn",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}\n",
    "description": "Export named function in ES6 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edfn",
    "body": "export default (${1:params}) => {\n\t$0\n}\n",
    "description": "Export default function in ES6 syntax"
  },
  "exportClass": {
    "prefix": "edc",
    "body": "export default class ${1:className} {\n\t$0\n}\n",
    "description": "Export default class in ES6 syntax"
  },
  "exportClassExtends": {
    "prefix": "edce",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n}\n",
    "description": "Export default class which extends a base one in ES6 syntax"
  },
  // Promises
  "Fetch Request": {
    "prefix": "fr",
    "body": [
      "const response = fetch('${1:URL}')",
      "\t.then(res => res.json())",
      "\t.then(data => console.log(data))"
    ],
    "description": "Fetch Request"
  },
  "Async Fetch Request": {
    "prefix": "afr",
    "body": [
      "const response: void | Response = await fetch(${1:URL}, ${2:INFO})",
      "\t.catch(e => {",
      "\t\tconsole.log(`ERROR: ${e.message}`)",
      "\t})",
      "",
      "if (response) {",
      "\tconst res = await response.json()",
      "\tconsole.log('Response:', JSON.stringify(res))",
      "}"
    ],
    "description": "Fetch Async/Await"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n})",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n})",
    "description": "Add the .then and .catch methods to handle promises"
  },
  "Axios Request": {
    "prefix": "fax",
    "body": [
      "axios.${1|get,post,put,delete|}('${2:url}')",
      "  .then(res => console.log(res.data))",
      "  .catch(err => console.log(err));"
    ],
    "description": "Axios Request"
  },
  // Node
  "Node index.js": {
    "prefix": "ndfn",
    "body": [
      "function ${1:functionName} (${2:params}) {",
      "\t${3:body}",
      "}",
      "module.exports = {",
      "\t${1:functionName}",
      "}"
    ],
    "description": "Index.js module"
  },
  "Node Require": {
    "prefix": "nrq",
    "body": "const ${1:import} = require('${module}')",
    "description": "Require a Node.js module"
  },
  // Express.js
  "Express Server": {
    "prefix": "expsrv",
    "body": [
      "const express = require('express')",
      "",
      "const app = express()",
      "",
      "app.${1|get,post,put,delete|}('${2:route}', (req, res) => {",
      "  $3",
      "})",
      "",
      "const PORT = process.env.PORT || ${4|3000,5000,8000,8080|}",
      "",
      "app.listen(PORT, () => console.log(`Server Running On Port ${PORT}`))"
    ],
    "description": "Express Server"
  },
  "Express Route": {
    "prefix": "exprt",
    "body": "app.${1|get,post,put,delete|}('${3:/}', (req, res) => {});",
    "description": "Express Route"
  },
  "Express Init Middleware": {
    "prefix": "exmw",
    "body": "app.use(${1:middleware})",
    "description": "Express Middleware"
  },
  // Eslint
  "eslint-disable": {
    "prefix": "eslint-disable",
    "body": [
      "/* eslint-disable ${1|camelcase,default-case,func-names,global-require,import/prefer-default-export,indent,max-len,new-cap,no-alert,no-cond-assign,no-confusing,no-console,no-extend-native,no-mixed-operators,no-new,no-param-reassign,no-shadow,no-undef,no-unused-vars,prefer-arrow-callback,prefer-rest-params,react/prop-types,wrap-iife|} */",
      "$0/* eslint-enable ${1} */"
    ],
    "description": "ESLint disable wrapper"
  },
  "eslint-disable-line": {
    "prefix": "eslint-disable-line",
    "body": [
      "// eslint-disable-line ${0:rule}"
    ],
    "description": "ESLint disable line"
  },
  "eslint-disable-next-line": {
    "prefix": "eslint-disable-next-line",
    "body": [
      "// eslint-disable-next-line ${0:rule}"
    ],
    "description": "ESLint disable next line"
  },
}
